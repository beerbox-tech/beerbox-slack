#!/usr/bin/env python3.10
# pylint: disable=invalid-name
# pylint: disable=missing-module-docstring
# pylint: disable=missing-function-docstring

import argparse
import re
import sys
from argparse import Namespace

from lib import print_with_state  # type: ignore

TYPES = ("fix", "feat", "refacto")
SCOPES = ("core", "slack")
REGEXP = re.compile(rf"({'|'.join(TYPES)})\(({'|'.join(SCOPES)})\): [a-z1-9\.]+")


def parse_args() -> Namespace:
    parser = argparse.ArgumentParser(
        prog="lint-commit",
        description="Lint a commit message",
    )
    parser.add_argument("--message", action="store", dest="message", required=True)
    parser.add_argument("--commit", action="store", dest="commit", required=True)
    return parser.parse_args()


def main(message: str, commit: str) -> int:
    if REGEXP.match(message):
        print_with_state(f"{commit} commit is valid", state="success")
        return 0
    print_with_state(f"{commit} commit is valid", state="failure")
    print(" â†³ commit message format must match 'type(scope): message'", end="\n\n")
    return 1


if __name__ == "__main__":
    kwargs = parse_args()
    sys.exit(main(**kwargs.__dict__))
